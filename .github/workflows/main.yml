name: "CI Pipeline for app service"
on : workflow_dispatch
jobs: 
  first_job:
    runs-on: ubuntu-latest
    steps:
      - name: display message
        run: echo "starting of CI"

      - name: run multiple commands
        run: | 
              echo "First pipeline is without variable"
              echo "Second pipeline is with variable"
              whoami
              pwd

  checkout_stage:
    runs-on: ubuntu-latest
    steps:
      - name: "checkout stage"
        uses: actions/checkout@v4.1.7
        with:
          repository: 'DevOpsuserdike/webapp'
      - name: "install java Version" 
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      - name: checklist
        run: |
              java --version
              mvn --version

      - name: "build maven project"
        run: mvn clean install  
  
      - name: "check the artifacts"
        run: ls -la /home/runner/.m2/repository/com/example/maven-project/webapp/1.0-SNAPSHOT/

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.1.0 # Ex: v2.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          #projectBaseDir: app/src
          args: >
            -Dsonar.organization=organizationsid
            -Dsonar.projectKey=organizationsid_firstproject

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN1 }}
          SONAR_HOST_URL: "https://sonarcloud.io"
      
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      
      - name: "jfrog artifacts"
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: "https://sidike1.jfrog.io"
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_SECRET }}

      - name: check version of jfrog  
        run: jf --version

      - name: create a text file
        run: echo "Siddhesh" >> test.txt 

      - name: copy to jfrog
        run: jf rt upload "/home/runner/work/webapp/webapp/webapp/target/*.war" artifactory/test-libs-snapshot-local/ --url="https://jfrogsiddk.jfrog.io/" --access-token=${{ secrets.JFROG_SECRET }}

  Buildjob:
    runs-on: ubuntu-latest
    steps:
      - name: buildtheproject
        run: echo "build stage"

  scanningjob:
    runs-on: ubuntu-latest
    steps:  
      - name: scanningjob
        run: echo "Scanning stage"

  nexusrepo:
    runs-on: ubuntu-latest
    steps:
      - name: "Artifacts upload stage"
        run: echo "Artifacts upload on nexus repository"
  



  
